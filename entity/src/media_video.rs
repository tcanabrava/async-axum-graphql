//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media_video")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub pid: Uuid,
    pub path: String,
    pub thumbnail: String,
    pub width: i32,
    pub height: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ingredient_media_video::Entity")]
    IngredientMediaVideo,
    #[sea_orm(has_many = "super::recipe_step_media_video::Entity")]
    RecipeStepMediaVideo,
}

impl Related<super::ingredient_media_video::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IngredientMediaVideo.def()
    }
}

impl Related<super::recipe_step_media_video::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecipeStepMediaVideo.def()
    }
}

impl Related<super::ingredient::Entity> for Entity {
    fn to() -> RelationDef {
        super::ingredient_media_video::Relation::Ingredient.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::ingredient_media_video::Relation::MediaVideo
                .def()
                .rev(),
        )
    }
}

impl Related<super::recipe_step::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_step_media_video::Relation::RecipeStep.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::recipe_step_media_video::Relation::MediaVideo
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
