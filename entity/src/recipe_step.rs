//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recipe_step")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub pid: Uuid,
    pub recipe_id: i32,
    pub member_id: i32,
    pub title: String,
    pub text: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::member::Entity",
        from = "Column::MemberId",
        to = "super::member::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Member,
    #[sea_orm(
        belongs_to = "super::recipe::Entity",
        from = "Column::RecipeId",
        to = "super::recipe::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Recipe,
    #[sea_orm(has_many = "super::recipe_step_media_picture::Entity")]
    RecipeStepMediaPicture,
    #[sea_orm(has_many = "super::recipe_step_media_video::Entity")]
    RecipeStepMediaVideo,
}

impl Related<super::member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Member.def()
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipe.def()
    }
}

impl Related<super::recipe_step_media_picture::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecipeStepMediaPicture.def()
    }
}

impl Related<super::recipe_step_media_video::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecipeStepMediaVideo.def()
    }
}

impl Related<super::media_picture::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_step_media_picture::Relation::MediaPicture.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::recipe_step_media_picture::Relation::RecipeStep
                .def()
                .rev(),
        )
    }
}

impl Related<super::media_video::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_step_media_video::Relation::MediaVideo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::recipe_step_media_video::Relation::RecipeStep
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
